{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Erek Speed contest Entry\
\
I've coded up a controller which I've trained with a genetic algorithm.  My main impetus for choosing a genetic algorithm was the fact that the contest seemed to be looking for learning algorithms as well as the fact that I've not written one before.\
\
The search space is quite huge though and that caused many problems.  A lot of choices revolve around trying to deal with this one constraint.\
\
I used a population size of 100.  A gene consisted of a series of map states which would map to a certain action array.  Because there are many map states I initialized the genome as I came across different map states under the assumption that some states would be more common than others.\
\
I used a tournament selection scheme for choosing which controllers to breed using N/4 as the tournament size (N is population size).\
\
I used uniform recombination due to the nature of the gene.  It's impossible to do single site cross over when different controllers haven't seen the same states.\
\
I used a mutation rate of 5/L.  L is the length of the gene.  This seemed to work okay for avoiding local maximums.\
\
My controller isn't very good though.  At about 18 generations I run out of heap due to Easy.save/load being terrible.  Even then, I can't load with 1 gig unless I use the best controller out of generation 10.\
\
I'll continue working on it and think eventually I'll develop a working system.}